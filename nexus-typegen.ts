/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./server/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Control: { // root type
    dev1: number; // Float!
    dev2: number; // Float!
    featureId?: string | null; // ID
    id?: string | null; // ID
    lasts?: string | null; // String
    name: string; // String!
    nominal: number; // Float!
    order: number; // Int!
    quality?: string | null; // String
    value?: number | null; // Float
  }
  Feature: { // root type
    id?: string | null; // ID
    layoutId?: string | null; // ID
    name: string; // String!
    quality?: string | null; // String
  }
  Layout: { // root type
    id?: string | null; // ID
    name: string; // String!
    partId?: string | null; // ID
    size: number; // Int!
  }
  Mutation: {};
  Part: { // root type
    id?: string | null; // ID
    name: string; // String!
  }
  Query: {};
  Subscription: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Control: { // field return type
    dev1: number; // Float!
    dev2: number; // Float!
    feature: NexusGenRootTypes['Feature'] | null; // Feature
    featureId: string | null; // ID
    id: string | null; // ID
    lasts: string | null; // String
    name: string; // String!
    nominal: number; // Float!
    order: number; // Int!
    quality: string | null; // String
    value: number | null; // Float
  }
  Feature: { // field return type
    controls: NexusGenRootTypes['Control'][]; // [Control!]!
    id: string | null; // ID
    layout: NexusGenRootTypes['Layout']; // Layout!
    layoutId: string | null; // ID
    name: string; // String!
    quality: string | null; // String
  }
  Layout: { // field return type
    features: NexusGenRootTypes['Feature'][]; // [Feature!]!
    id: string | null; // ID
    name: string; // String!
    part: NexusGenRootTypes['Part']; // Part!
    partId: string | null; // ID
    size: number; // Int!
  }
  Mutation: { // field return type
    addControl: NexusGenRootTypes['Control']; // Control!
    addFeature: NexusGenRootTypes['Feature']; // Feature!
    addLayout: NexusGenRootTypes['Layout']; // Layout!
    addPart: NexusGenRootTypes['Part']; // Part!
    addValue: NexusGenRootTypes['Control']; // Control!
  }
  Part: { // field return type
    id: string | null; // ID
    layouts: NexusGenRootTypes['Layout'][]; // [Layout!]!
    name: string; // String!
  }
  Query: { // field return type
    controls: NexusGenRootTypes['Control'][]; // [Control!]!
    features: NexusGenRootTypes['Feature'][]; // [Feature!]!
    getPart: NexusGenRootTypes['Part'] | null; // Part
    layouts: NexusGenRootTypes['Layout'][]; // [Layout!]!
    parts: NexusGenRootTypes['Part'][]; // [Part!]!
  }
  Subscription: { // field return type
    addedControl: NexusGenRootTypes['Control'] | null; // Control
    updatedControl: NexusGenRootTypes['Control'] | null; // Control
  }
}

export interface NexusGenFieldTypeNames {
  Control: { // field return type name
    dev1: 'Float'
    dev2: 'Float'
    feature: 'Feature'
    featureId: 'ID'
    id: 'ID'
    lasts: 'String'
    name: 'String'
    nominal: 'Float'
    order: 'Int'
    quality: 'String'
    value: 'Float'
  }
  Feature: { // field return type name
    controls: 'Control'
    id: 'ID'
    layout: 'Layout'
    layoutId: 'ID'
    name: 'String'
    quality: 'String'
  }
  Layout: { // field return type name
    features: 'Feature'
    id: 'ID'
    name: 'String'
    part: 'Part'
    partId: 'ID'
    size: 'Int'
  }
  Mutation: { // field return type name
    addControl: 'Control'
    addFeature: 'Feature'
    addLayout: 'Layout'
    addPart: 'Part'
    addValue: 'Control'
  }
  Part: { // field return type name
    id: 'ID'
    layouts: 'Layout'
    name: 'String'
  }
  Query: { // field return type name
    controls: 'Control'
    features: 'Feature'
    getPart: 'Part'
    layouts: 'Layout'
    parts: 'Part'
  }
  Subscription: { // field return type name
    addedControl: 'Control'
    updatedControl: 'Control'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addControl: { // args
      dev1: number; // Float!
      dev2: number; // Float!
      featureId: string; // String!
      name: string; // String!
      nominal: number; // Float!
      order: number; // Int!
    }
    addFeature: { // args
      layoutId: string; // String!
      name: string; // String!
    }
    addLayout: { // args
      name: string; // String!
      partId: string; // String!
      size: number; // Int!
    }
    addPart: { // args
      name: string; // String!
    }
    addValue: { // args
      id: string; // String!
      value?: number | null; // Float
    }
  }
  Query: {
    getPart: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}